#!/usr/bin/env python3

import csv
import logging
import argparse

import psycopg2
from psycopg2 import sql

import utils as ut

fmt = '%(asctime)s : %(levelname)s : %(message)s'
logging.basicConfig(format=fmt, level=logging.INFO)
logger = logging.getLogger(__name__)

def copy_stmt(table, cols, sep=',', schema=None, header=True):
    query = [sql.SQL('copy')]

    if schema is not None:
        query += [sql.Identifier(schema), sql.SQL('.')]

    query += [
        sql.Identifier(table),

        sql.SQL('('),
        sql.SQL(', ').join(sql.Identifier(n) for n in cols),
        sql.SQL(')'),

        sql.SQL('from stdin'),

        sql.SQL('csv')
    ]

    if header:
        query += [
            sql.SQL('header')
        ]

    query += [
        sql.SQL('delimiter'), sql.Literal(sep)
    ]

    return query

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='User-friendly Postgres COPY')

    parser.add_argument('table', help='target table or schema.table')
    parser.add_argument('files', nargs='*', metavar='file',
                        help='files to load (default stdin)')

    parser.add_argument('-d', '--dsn',
                        help='DSN for target DB (default local Unix socket')
    parser.add_argument('-s', '--sep', default=',',
                        help='separator character')
    parser.add_argument('-p', '--progress', action='store_true',
                        help='show progress bar')

    args = parser.parse_args()

    if '.' in args.table:
        schema, table = args.table.split('.')
    else:
        schema, table = 'public', args.table

    if args.dsn is None:
        conn_args = {'host': '/var/run/postgresql'}
    else:
        conn_args = {'dsn': args.dsn}

    progress = lambda x: x
    if args.progress:
        try:
            from tqdm import tqdm
            progress = tqdm
        except ImportError:
            logger.warning('tqdm not found, cannot show progress bar')

    if len(args.files) > 0:
        files = args.files
    else:
        files = ['-'] # stdin

    with psycopg2.connect(**conn_args) as conn:
        for filename in progress(files):
            with ut.smart_open(filename, 'rt') as f:
                reader = csv.DictReader(f, delimiter=args.sep)
                cols = reader.fieldnames

            with ut.smart_open(filename, 'rt') as f:
                stmt = copy_stmt(schema=schema, table=table, cols=cols,
                                 sep=args.sep, header=(filename != '-'))
                stmt = sql.Composed(stmt).join(' ').as_string(conn)

                with conn.cursor() as cur:
                    cur.copy_expert(stmt, f)

