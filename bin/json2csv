#!/usr/bin/env python3

# Convert a jsonl file (one json document per line, each json doc consisting of
# a dictionary with the same keys) to csv.

import csv
import json
import argparse
import contextlib

import utils as ut

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Convert JSONL to csv')

    # Input options
    parser.add_argument('infile', default='-', nargs='?',
                        help='input file (default stdin)')

    # Output options
    parser.add_argument('outfile', default='-', nargs='?',
                        help='output file (default stdout)')
    parser.add_argument('-a', '--append', action='store_true',
                        help='append to output file (default overwrite)')
    parser.add_argument('-s', '--skipheader', action='store_true',
                        help='skip writing header row')
    parser.add_argument('-l', '--delimiter', default=',',
                        help='field delimiter')
    parser.add_argument('-t', '--terminator', default='\n',
                        help='line terminator')

    args = parser.parse_args()

    outmode = ('w+t' if args.append else 'wt')

    outparams = {
        'delimiter'       : args.delimiter,
        'lineterminator'  : args.terminator,
        'extrasaction'    : 'raise'
    }

    with contextlib.ExitStack() as stack:
        # NOTE smart_open implements logic to avoid closing stdin or stdout
        inf = stack.enter_context(ut.smart_open(args.infile, 'rt'))
        ouf = stack.enter_context(ut.smart_open(args.outfile, outmode))

        first = json.loads(next(inf))
        outparams['fieldnames'] = list(first.keys())

        writer = csv.DictWriter(ouf, **outparams)

        if not args.skipheader:
            writer.writeheader()

        writer.writerow(first)

        for line in inf:
            writer.writerow(json.loads(line))

